package com.xobotun.grafanagen.model.grafana

/**
 * Core Grafana entity.
 *
 * Documenation example:
 * ```
 * {
 *   "id": null,
 *   "uid": "cLV5GDCkz",
 *   "title": "New dashboard",
 *   "tags": [],
 *   "style": "dark",
 *   "timezone": "browser",
 *   "editable": true,
 *   "hideControls": false,
 *   "graphTooltip": 1,
 *   "panels": [],
 *   "time": {
 *     "from": "now-6h",
 *     "to": "now"
 *   },
 *   "timepicker": {
 *     "time_options": [],
 *     "refresh_intervals": []
 *   },
 *   "templating": {
 *     "list": []
 *   },
 *   "annotations": {
 *     "list": []
 *   },
 *   "refresh": "5s",
 *   "schemaVersion": 17,
 *   "version": 0,
 *   "links": []
 * }
 * ```
 */
data class Dashboard(
    /** Unique numeric identifier for the dashboard. (generated by the db) */
    val id: Int?,
    /** Unique dashboard identifier that can be generated by anyone. (8-40 chars) */
    val uid: String,
    /** Title of dashboard. */
    val title: String,
    /** Tags associated with dashboard. */
    val tags: List<String>,
    /** Theme of dashboard, i.e. `dark` or `light`. TODO: look up the theme list. */
    val style: String,
    /** Timezone of dashboard, i.e. `utc` or `browser`. TODO: Look up format. */
    val timezone: String,
    /** Whether a dashboard is editable or not. TODO: figure out what this gives to the user. */
    val editable: Boolean,
    /** TODO: figure out the purpose. */
    val hideControls: Boolean,
    /** Dashboard crosshair behaviour. See [GraphTooltip] */
    val graphTooltip: GraphTooltip,
    /** The widget list, the heart of Grafana */
    val panels: List<Any>,
    /** Time range for dashboard, i.e. last 6 hours, last 7 days, etc. */
    val time: TimeInterval,
    /** timepicker metadata, see timepicker section for details. TODO */
    val timepicker: TimePicker,
    /** templating metadata, see templating section for details. TODO */
    val templating: Any,
    /** annotations metadata, see annotations section for details. TODO */
    val annotations: Any,
    /** Auto-refresh interval. TODO: find out the format. */
    val refresh: String,
    /** Version of the JSON schema (integer), incremented each time a Grafana update brings changes to said schema. TODO: figure out our schema version. Enum maybe? */
    val schemaVersion: String,
    /** Version of the dashboard (integer), incremented each time the dashboard is updated. */
    val version: String,
    /** Links to other dashboards and useful intranet links. */
    val links: List<String>,
)
